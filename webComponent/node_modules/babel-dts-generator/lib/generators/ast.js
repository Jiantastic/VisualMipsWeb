'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _class, _class2, _class3, _class4, _class5, _class6, _class7, _class8, _class9, _class10, _class11, _class12, _class13, _class14, _class15, _class16, _class17, _class18, _class19, _class20, _class21, _class22, _class23, _class24, _class25, _class26, _class27;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createModuleDeclaration = createModuleDeclaration;
exports.createExportAllFrom = createExportAllFrom;
exports.createExportDeclaration = createExportDeclaration;
exports.createImportDeclaration = createImportDeclaration;
exports.createVariableDeclaration = createVariableDeclaration;
exports.createVariableDeclarator = createVariableDeclarator;
exports.createExportSpecifier = createExportSpecifier;
exports.createExport = createExport;
exports.createImportSpecifier = createImportSpecifier;
exports.createImportDefaultSpecifier = createImportDefaultSpecifier;
exports.createImportNamespaceSpecifier = createImportNamespaceSpecifier;
exports.createImport = createImport;
exports.createParam = createParam;
exports.createObjectParam = createObjectParam;
exports.createObjectParamProp = createObjectParamProp;
exports.createFunction = createFunction;
exports.createInterface = createInterface;
exports.createInterfaceMethod = createInterfaceMethod;
exports.createInterfaceProperty = createInterfaceProperty;
exports.createInterfaceIndexer = createInterfaceIndexer;
exports.createInterfaceCall = createInterfaceCall;
exports.createClass = createClass;
exports.createImplements = createImplements;
exports.createClassConstructor = createClassConstructor;
exports.createClassMethod = createClassMethod;
exports.createClassProperty = createClassProperty;

var _utils = require('./utils');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Node = function () {
  function Node() {
    _classCallCheck(this, Node);

    this._leadingComments = null;
  }

  _createClass(Node, [{
    key: 'fromSource',
    value: function fromSource(node) {
      this._leadingComments = node.leadingComments || null;

      return this;
    }
  }, {
    key: 'toCode',
    value: function toCode(ctx) {
      var output = '' + this._getCommentString(ctx) + this._toCode(ctx);

      return output.split('\n').map(indent(ctx)).join('\n');
    }
  }, {
    key: 'toString',
    value: function toString() {
      var ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.toCode(_extends({}, emptyCtx(), ctx));
    }
  }, {
    key: '_getCommentString',
    value: function _getCommentString(_ref) {
      var suppressComments = _ref.suppressComments;

      if (suppressComments) {
        return '';
      }

      var comments = this._leadingComments ? this._leadingComments.filter(_utils.id).map(function (s) {
        switch (s.type) {
          case 'CommentLine':
            return ('//' + s.value).trim();

          case 'CommentBlock':
            return ('/*' + s.value + '*/').trim();

          default:
            return null;
        }
      }).filter(_utils.id).join('\n') : '';

      return comments.length === 0 ? '' : '\n' + comments + '\n';
    }

    // Note: _toCode is not expected to indent itself, only children.

  }, {
    key: '_toCode',
    value: function _toCode() {
      throw new Error('toCode is abstract.');
    }
  }, {
    key: '_includeComments',
    value: function _includeComments() {
      return true;
    }
  }]);

  return Node;
}();

var DecorableNode = function (_Node) {
  _inherits(DecorableNode, _Node);

  function DecorableNode() {
    _classCallCheck(this, DecorableNode);

    return _possibleConstructorReturn(this, (DecorableNode.__proto__ || Object.getPrototypeOf(DecorableNode)).apply(this, arguments));
  }

  _createClass(DecorableNode, [{
    key: 'fromSource',
    value: function fromSource(node) {
      var decoLeadingComments = [];
      if (node.decorators) {
        var _ref2;

        var all = node.decorators.map(function (n) {
          return n.leadingComments;
        });
        decoLeadingComments = (_ref2 = []).concat.apply(_ref2, _toConsumableArray(all));
      }

      this._leadingComments = decoLeadingComments.concat(node.leadingComments || []);

      return this;
    }
  }]);

  return DecorableNode;
}(Node);

var ModuleDeclarationNode = (0, _utils.factory)(_class = function (_Node2) {
  _inherits(ModuleDeclarationNode, _Node2);

  function ModuleDeclarationNode(name, children) {
    _classCallCheck(this, ModuleDeclarationNode);

    var _this2 = _possibleConstructorReturn(this, (ModuleDeclarationNode.__proto__ || Object.getPrototypeOf(ModuleDeclarationNode)).call(this));

    _this2._name = name;
    _this2._children = children;
    return _this2;
  }

  _createClass(ModuleDeclarationNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var code = ctx.suppressAmbientDeclaration ? this._children.map(toCode(ctx)).join('\n') : this._children.map(toCode(ctx.indent())).join('\n');
      return ctx.suppressAmbientDeclaration ? code : 'declare module \'' + this._name + '\' {\n' + code + '\n}';
    }
  }]);

  return ModuleDeclarationNode;
}(Node)) || _class;

var ExportAllFromNode = (0, _utils.factory)(_class2 = function (_Node3) {
  _inherits(ExportAllFromNode, _Node3);

  function ExportAllFromNode(source) {
    _classCallCheck(this, ExportAllFromNode);

    var _this3 = _possibleConstructorReturn(this, (ExportAllFromNode.__proto__ || Object.getPrototypeOf(ExportAllFromNode)).call(this));

    _this3._source = source;
    return _this3;
  }

  _createClass(ExportAllFromNode, [{
    key: '_toCode',
    value: function _toCode() {
      return 'export * from \'' + this._source + '\';';
    }
  }]);

  return ExportAllFromNode;
}(Node)) || _class2;

var ExportNamedDeclarationNode = (0, _utils.factory)(_class3 = function (_Node4) {
  _inherits(ExportNamedDeclarationNode, _Node4);

  function ExportNamedDeclarationNode(declaration) {
    _classCallCheck(this, ExportNamedDeclarationNode);

    var _this4 = _possibleConstructorReturn(this, (ExportNamedDeclarationNode.__proto__ || Object.getPrototypeOf(ExportNamedDeclarationNode)).call(this));

    _this4._declaration = declaration;
    return _this4;
  }

  _createClass(ExportNamedDeclarationNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var comment = this._declaration._getCommentString(ctx);
      var decl = this._declaration._toCode(ctx);
      var suffix = this._declaration.preventSemi ? '' : ';';

      return comment + 'export' + (ctx.suppressAmbientDeclaration ? ' declare' : '') + ' ' + decl + suffix;
    }
  }]);

  return ExportNamedDeclarationNode;
}(Node)) || _class3;

var ImportDeclarationNode = (0, _utils.factory)(_class4 = function (_Node5) {
  _inherits(ImportDeclarationNode, _Node5);

  function ImportDeclarationNode(decl) {
    _classCallCheck(this, ImportDeclarationNode);

    var _this5 = _possibleConstructorReturn(this, (ImportDeclarationNode.__proto__ || Object.getPrototypeOf(ImportDeclarationNode)).call(this));

    _this5._source = decl.source.value;
    return _this5;
  }

  _createClass(ImportDeclarationNode, [{
    key: '_toCode',
    value: function _toCode(_ctx) {
      var source = this._source;
      return 'import \'' + source + '\';';
    }
  }]);

  return ImportDeclarationNode;
}(Node)) || _class4;

var VariableDeclarationNode = (0, _utils.factory)(_class5 = function (_Node6) {
  _inherits(VariableDeclarationNode, _Node6);

  function VariableDeclarationNode(kind, declarations) {
    _classCallCheck(this, VariableDeclarationNode);

    var _this6 = _possibleConstructorReturn(this, (VariableDeclarationNode.__proto__ || Object.getPrototypeOf(VariableDeclarationNode)).call(this));

    _this6._kind = kind;
    _this6._declarations = declarations;
    return _this6;
  }

  _createClass(VariableDeclarationNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var kind = this._kind;
      var declarations = this._declarations.map(toCode(_extends({}, ctx, { level: 0 }))).filter(_utils.id);
      if (declarations.length === 0) {
        return null;
      }

      if (declarations.length > 1) {
        (function () {
          var extraIndent = ctx.multiVarStep;

          var doIndent = indent({ level: 1, step: extraIndent });
          declarations = declarations.map(function (dec, i) {
            if (i === 0) {
              return dec;
            }

            return doIndent(dec);
          });
        })();
      }

      var decCode = declarations.join(',\n');

      return kind + ' ' + decCode;
    }
  }]);

  return VariableDeclarationNode;
}(Node)) || _class5;

var VariableDeclaratorNode = (0, _utils.factory)(_class6 = function (_Node7) {
  _inherits(VariableDeclaratorNode, _Node7);

  function VariableDeclaratorNode(name, type) {
    _classCallCheck(this, VariableDeclaratorNode);

    var _this7 = _possibleConstructorReturn(this, (VariableDeclaratorNode.__proto__ || Object.getPrototypeOf(VariableDeclaratorNode)).call(this));

    _this7._name = name;
    _this7._type = type;
    return _this7;
  }

  _createClass(VariableDeclaratorNode, [{
    key: '_toCode',
    value: function _toCode() {
      return this._name + ': ' + this._type;
    }
  }]);

  return VariableDeclaratorNode;
}(Node)) || _class6;

var ExportSpecifierNode = (0, _utils.factory)(_class7 = function (_Node8) {
  _inherits(ExportSpecifierNode, _Node8);

  function ExportSpecifierNode(exported, local) {
    _classCallCheck(this, ExportSpecifierNode);

    var _this8 = _possibleConstructorReturn(this, (ExportSpecifierNode.__proto__ || Object.getPrototypeOf(ExportSpecifierNode)).call(this));

    _this8._exported = exported;
    _this8._local = local;
    return _this8;
  }

  _createClass(ExportSpecifierNode, [{
    key: '_toCode',
    value: function _toCode() {
      if (!this._local || this._local === this._exported) {
        return '' + this._exported;
      }

      return this._exported + ' as ' + this._local;
    }
  }]);

  return ExportSpecifierNode;
}(Node)) || _class7;

var ExportNode = (0, _utils.factory)(_class8 = function (_Node9) {
  _inherits(ExportNode, _Node9);

  function ExportNode(exported, source) {
    _classCallCheck(this, ExportNode);

    var _this9 = _possibleConstructorReturn(this, (ExportNode.__proto__ || Object.getPrototypeOf(ExportNode)).call(this));

    _this9._exported = exported;
    _this9._source = source;
    return _this9;
  }

  _createClass(ExportNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var exported = this._exported.map(toCode(_extends({}, ctx, { level: 1 }))).join(',\n');

      if (this._source) {
        return 'export' + (ctx.suppressAmbientDeclaration ? ' declare' : '') + ' {\n' + exported + '\n} from \'' + this._source + '\';';
      }

      return 'export' + (ctx.suppressAmbientDeclaration ? ' declare' : '') + ' {\n' + exported + '\n};';
    }
  }]);

  return ExportNode;
}(Node)) || _class8;

var ImportSpecifierNode = (0, _utils.factory)(_class9 = function (_Node10) {
  _inherits(ImportSpecifierNode, _Node10);

  function ImportSpecifierNode(imported, local) {
    _classCallCheck(this, ImportSpecifierNode);

    var _this10 = _possibleConstructorReturn(this, (ImportSpecifierNode.__proto__ || Object.getPrototypeOf(ImportSpecifierNode)).call(this));

    _this10._imported = imported;
    _this10._local = local;
    return _this10;
  }

  _createClass(ImportSpecifierNode, [{
    key: '_toCode',
    value: function _toCode() {
      if (!this._local || this._local === this._imported) {
        return '' + this._imported;
      }

      return this._imported + ' as ' + this._local;
    }
  }]);

  return ImportSpecifierNode;
}(Node)) || _class9;

var ImportDefaultSpecifierNode = (0, _utils.factory)(_class10 = function (_Node11) {
  _inherits(ImportDefaultSpecifierNode, _Node11);

  function ImportDefaultSpecifierNode(local) {
    _classCallCheck(this, ImportDefaultSpecifierNode);

    var _this11 = _possibleConstructorReturn(this, (ImportDefaultSpecifierNode.__proto__ || Object.getPrototypeOf(ImportDefaultSpecifierNode)).call(this));

    _this11._local = local;
    return _this11;
  }

  _createClass(ImportDefaultSpecifierNode, [{
    key: '_toCode',
    value: function _toCode() {
      return '' + this._local;
    }
  }]);

  return ImportDefaultSpecifierNode;
}(Node)) || _class10;

var ImportNamespaceSpecifierNode = (0, _utils.factory)(_class11 = function (_Node12) {
  _inherits(ImportNamespaceSpecifierNode, _Node12);

  function ImportNamespaceSpecifierNode(local) {
    _classCallCheck(this, ImportNamespaceSpecifierNode);

    var _this12 = _possibleConstructorReturn(this, (ImportNamespaceSpecifierNode.__proto__ || Object.getPrototypeOf(ImportNamespaceSpecifierNode)).call(this));

    _this12._local = local;
    return _this12;
  }

  _createClass(ImportNamespaceSpecifierNode, [{
    key: '_toCode',
    value: function _toCode() {
      return '* as ' + this._local;
    }
  }]);

  return ImportNamespaceSpecifierNode;
}(Node)) || _class11;

var ImportNode = (0, _utils.factory)(_class12 = function (_Node13) {
  _inherits(ImportNode, _Node13);

  function ImportNode(encloseSpecifiers, specifiers, source) {
    _classCallCheck(this, ImportNode);

    var _this13 = _possibleConstructorReturn(this, (ImportNode.__proto__ || Object.getPrototypeOf(ImportNode)).call(this));

    _this13._specifiers = specifiers;
    _this13._encloseSpecifiers = encloseSpecifiers;
    _this13._source = source;
    return _this13;
  }

  _createClass(ImportNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var specifiers = null;

      if (this._encloseSpecifiers) {
        specifiers = this._specifiers.map(toCode(_extends({}, ctx, { level: 1 }))).join(',\n');
        if (this._source) {
          return 'import {\n' + specifiers + '\n} from \'' + this._source + '\';';
        }

        return 'import {\n' + specifiers + '\n};';
      }

      specifiers = this._specifiers.map(toCode(_extends({}, ctx, { level: 0 }))).join(',\n');
      if (this._source) {
        return 'import ' + specifiers + ' from \'' + this._source + '\';';
      }

      return 'import ' + specifiers + ';';
    }
  }]);

  return ImportNode;
}(Node)) || _class12;

var ParameterNode = (0, _utils.factory)(_class13 = function (_Node14) {
  _inherits(ParameterNode, _Node14);

  function ParameterNode(name, type, isRest, isOptional) {
    _classCallCheck(this, ParameterNode);

    var _this14 = _possibleConstructorReturn(this, (ParameterNode.__proto__ || Object.getPrototypeOf(ParameterNode)).call(this));

    _this14._name = name;
    _this14._type = type;
    _this14._isRest = isRest;
    _this14._isOptional = isOptional;
    return _this14;
  }

  _createClass(ParameterNode, [{
    key: 'asRestParam',
    value: function asRestParam() {
      if (this._isRest) {
        return this;
      }

      return new ParameterNode(this._name, this._type, true, this._isOptional);
    }
  }, {
    key: 'asOptional',
    value: function asOptional() {
      if (this._isOptional) {
        return this;
      }

      return new ParameterNode(this._name, this._type, this._isRest, true);
    }
  }, {
    key: '_includeComments',
    value: function _includeComments() {
      return false;
    }
  }, {
    key: '_toCode',
    value: function _toCode(_ref3) {
      var _ref3$unspecifiedAsOp = _ref3.unspecifiedAsOptional,
          unspecifiedAsOptional = _ref3$unspecifiedAsOp === undefined ? false : _ref3$unspecifiedAsOp;

      var type = this.type;
      var optional = unspecifiedAsOptional && this._type === null && !this._isRest || this._isOptional;
      return '' + (this._isRest ? '...' : '') + this._name + (optional ? '?' : '') + ': ' + type;
    }
  }, {
    key: 'type',
    get: function get() {
      if (this._type) {
        return this._type;
      }

      if (this._isRest) {
        return 'any[]';
      }

      return 'any';
    }
  }, {
    key: 'isSpecified',
    get: function get() {
      return this._type !== null;
    }
  }]);

  return ParameterNode;
}(Node)) || _class13;

var ObjectParameterNode = (0, _utils.factory)(_class14 = function (_Node15) {
  _inherits(ObjectParameterNode, _Node15);

  function ObjectParameterNode(properties, type, isOptional) {
    _classCallCheck(this, ObjectParameterNode);

    var _this15 = _possibleConstructorReturn(this, (ObjectParameterNode.__proto__ || Object.getPrototypeOf(ObjectParameterNode)).call(this));

    _this15._props = properties;
    _this15._type = type;
    _this15._isOptional = isOptional;
    return _this15;
  }

  _createClass(ObjectParameterNode, [{
    key: 'asOptional',
    value: function asOptional() {
      if (this._isOptional) {
        return this;
      }

      return new ObjectParameterNode(this._props, this._type, true);
    }
  }, {
    key: '_toCode',
    value: function _toCode(ctx) {
      if (this._props.length === 0) {
        return '{}: {}';
      }

      var _ctx$unspecifiedAsOpt = ctx.unspecifiedAsOptional,
          unspecifiedAsOptional = _ctx$unspecifiedAsOpt === undefined ? false : _ctx$unspecifiedAsOpt;

      var propStr = this.getIdent(ctx);
      var type = this.getType(ctx);
      var optional = unspecifiedAsOptional && this._type === null || this._isOptional;

      return '' + propStr + (optional ? '?' : '') + ': ' + type;
    }
  }, {
    key: 'getIdent',
    value: function getIdent(ctx) {
      if (this._props.length === 0) {
        return '{}';
      }

      var props = this._props.map(function (prop) {
        return prop.toCode(_extends({}, ctx, { level: 0 })).split('\n').map(indent(_extends({}, ctx, { level: 1 }))).join('\n');
      }).join(',\n');

      return '{\n' + props + '\n}';
    }
  }, {
    key: 'getType',
    value: function getType(ctx) {
      if (this._type) {
        return this._type;
      }

      if (this._props.length === 0) {
        return '{}';
      }

      var propTypes = this._props.map(function (prop) {
        return prop.getTypeString(_extends({}, ctx, { level: 0 })).split('\n').map(indent(_extends({}, ctx, { level: 1 }))).join('\n');
      }).join(',\n');

      return indent(ctx)('{\n' + propTypes + '\n}');
    }
  }, {
    key: 'isSpecified',
    get: function get() {
      return this._type !== null;
    }
  }]);

  return ObjectParameterNode;
}(Node)) || _class14;

var ObjectParameterPropertyNode = (0, _utils.factory)(_class15 = function (_Node16) {
  _inherits(ObjectParameterPropertyNode, _Node16);

  function ObjectParameterPropertyNode(key, value, isOptional) {
    _classCallCheck(this, ObjectParameterPropertyNode);

    var _this16 = _possibleConstructorReturn(this, (ObjectParameterPropertyNode.__proto__ || Object.getPrototypeOf(ObjectParameterPropertyNode)).call(this));

    _this16._key = key;
    _this16._value = value;
    _this16._isOptional = isOptional;
    return _this16;
  }

  _createClass(ObjectParameterPropertyNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var childCtx = _extends({}, ctx, { level: 0 });
      var prop = this._value === null ? this._key : this.key + ': ' + this._value.getIdent(childCtx);

      return prop;
    }
  }, {
    key: 'getTypeString',
    value: function getTypeString(ctx) {
      var _ctx$unspecifiedAsOpt2 = ctx.unspecifiedAsOptional,
          unspecifiedAsOptional = _ctx$unspecifiedAsOpt2 === undefined ? false : _ctx$unspecifiedAsOpt2;

      var prefix = unspecifiedAsOptional ? this.key + '?' : this.key;

      if (this._value === null) {
        return prefix + ': any';
      }

      var childCtx = _extends({}, ctx, { level: 0 });
      var valueStr = this._value.getType(childCtx);
      return prefix + ': ' + valueStr;
    }
  }, {
    key: 'key',
    get: function get() {
      return this._key;
    }
  }]);

  return ObjectParameterPropertyNode;
}(Node)) || _class15;

var MethodNode = (0, _utils.factory)(_class16 = function (_DecorableNode) {
  _inherits(MethodNode, _DecorableNode);

  function MethodNode(name, params, type, typeParameters) {
    _classCallCheck(this, MethodNode);

    var _this17 = _possibleConstructorReturn(this, (MethodNode.__proto__ || Object.getPrototypeOf(MethodNode)).call(this));

    _this17._name = name;
    _this17._params = params;
    _this17._type = type;
    _this17._typeParameters = typeParameters;
    return _this17;
  }

  _createClass(MethodNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var lastSpecified = (0, _utils.findLastIndex)(this._params, function (p) {
        return p.isSpecified;
      });
      var markUnspecifiedAsOptional = ctx.markUnspecifiedAsOptional;
      var childCtx = _extends({}, ctx, { level: 0 });
      var params = this._params.map(function (param, index) {
        return param._toCode(_extends({}, childCtx, { unspecifiedAsOptional: markUnspecifiedAsOptional && index > lastSpecified }));
      }).join(', ');

      var type = this.type === null ? '' : ': ' + this.type;
      var typeParameters = this._typeParameters !== null ? '<' + this._typeParameters.join(', ') + '>' : '';

      return '' + (this.name || '') + typeParameters + '(' + params + ')' + type;
    }
  }, {
    key: 'name',
    get: function get() {
      return this._name;
    }
  }, {
    key: 'isConstructor',
    get: function get() {
      return false;
    }
  }, {
    key: 'type',
    get: function get() {
      if (this.isConstructor) {
        return null;
      }

      if (this._type) {
        return this._type;
      }

      return 'any';
    }
  }]);

  return MethodNode;
}(DecorableNode)) || _class16;

var FunctionNode = (0, _utils.factory)(_class17 = function (_MethodNode) {
  _inherits(FunctionNode, _MethodNode);

  function FunctionNode(name, params, type, typeParameters) {
    _classCallCheck(this, FunctionNode);

    return _possibleConstructorReturn(this, (FunctionNode.__proto__ || Object.getPrototypeOf(FunctionNode)).call(this, name, params, type, typeParameters));
  }

  _createClass(FunctionNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      return 'function ' + _get(FunctionNode.prototype.__proto__ || Object.getPrototypeOf(FunctionNode.prototype), '_toCode', this).call(this, ctx);
    }
  }]);

  return FunctionNode;
}(MethodNode)) || _class17;

var InterfaceNode = (0, _utils.factory)(_class18 = function (_Node17) {
  _inherits(InterfaceNode, _Node17);

  function InterfaceNode(name, members, baseInterfaces, typeParameters) {
    _classCallCheck(this, InterfaceNode);

    var _this19 = _possibleConstructorReturn(this, (InterfaceNode.__proto__ || Object.getPrototypeOf(InterfaceNode)).call(this));

    _this19._name = name;
    _this19._members = members;
    _this19._baseInterfaces = baseInterfaces;
    _this19._typeParameters = typeParameters;
    return _this19;
  }

  _createClass(InterfaceNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var members = this._members.map(toCode(_extends({}, ctx, { level: 1 }))).join('\n');
      var baseInterfaces = this._baseInterfaces.map(toCode(_extends({}, ctx, { level: 0 }))).join(', ');
      var extendsStr = baseInterfaces.length === 0 ? '' : ' extends ' + baseInterfaces;
      var typeParameters = this._typeParameters !== null ? '<' + this._typeParameters.join(', ') + '>' : '';
      var decl = ctx.suppressAmbientDeclaration ? ' declare' : '';

      return 'export' + decl + ' interface ' + this._name + typeParameters + extendsStr + ' {\n' + members + '\n}';
    }
  }]);

  return InterfaceNode;
}(Node)) || _class18;

var InterfaceCallNode = (0, _utils.factory)(_class19 = function (_MethodNode2) {
  _inherits(InterfaceCallNode, _MethodNode2);

  function InterfaceCallNode(params, type) {
    _classCallCheck(this, InterfaceCallNode);

    return _possibleConstructorReturn(this, (InterfaceCallNode.__proto__ || Object.getPrototypeOf(InterfaceCallNode)).call(this, null, params, type, null));
  }

  _createClass(InterfaceCallNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      return _get(InterfaceCallNode.prototype.__proto__ || Object.getPrototypeOf(InterfaceCallNode.prototype), '_toCode', this).call(this, ctx) + ';';
    }
  }]);

  return InterfaceCallNode;
}(MethodNode)) || _class19;

var InterfaceMethodNode = (0, _utils.factory)(_class20 = function (_MethodNode3) {
  _inherits(InterfaceMethodNode, _MethodNode3);

  function InterfaceMethodNode(name, params, type, typeParameters, isStatic, isOptional) {
    _classCallCheck(this, InterfaceMethodNode);

    var _this21 = _possibleConstructorReturn(this, (InterfaceMethodNode.__proto__ || Object.getPrototypeOf(InterfaceMethodNode)).call(this, name, params, type, typeParameters));

    _this21._static = isStatic;
    _this21._optional = isOptional;
    return _this21;
  }

  _createClass(InterfaceMethodNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var prefix = this._static ? 'static ' : '';

      if (this._optional) {
        var params = this._params.map(toCode(_extends({}, ctx, { level: 0 }))).join(', ');
        var type = this._type !== null ? ' => ' + this._type : '';

        return '' + prefix + (this.name || '') + ': (' + params + ')' + type + ';';
      }

      return '' + prefix + _get(InterfaceMethodNode.prototype.__proto__ || Object.getPrototypeOf(InterfaceMethodNode.prototype), '_toCode', this).call(this, ctx) + ';';
    }
  }, {
    key: 'name',
    get: function get() {
      return this._optional ? _get(InterfaceMethodNode.prototype.__proto__ || Object.getPrototypeOf(InterfaceMethodNode.prototype), 'name', this) + '?' : _get(InterfaceMethodNode.prototype.__proto__ || Object.getPrototypeOf(InterfaceMethodNode.prototype), 'name', this);
    }
  }]);

  return InterfaceMethodNode;
}(MethodNode)) || _class20;

var InterfacePropertyNode = (0, _utils.factory)(_class21 = function (_Node18) {
  _inherits(InterfacePropertyNode, _Node18);

  function InterfacePropertyNode(name, type, isStatic, isOptional) {
    _classCallCheck(this, InterfacePropertyNode);

    var _this22 = _possibleConstructorReturn(this, (InterfacePropertyNode.__proto__ || Object.getPrototypeOf(InterfacePropertyNode)).call(this));

    _this22._name = name;
    _this22._type = type;
    _this22._static = isStatic;
    _this22._optional = isOptional;
    return _this22;
  }

  _createClass(InterfacePropertyNode, [{
    key: '_toCode',
    value: function _toCode() {
      var prefix = this._static ? 'static ' : '';
      var name = this._optional ? this._name + '?' : this._name;

      return '' + prefix + name + ': ' + this._type + ';';
    }
  }]);

  return InterfacePropertyNode;
}(Node)) || _class21;

var InterfaceIndexerNode = (0, _utils.factory)(_class22 = function (_Node19) {
  _inherits(InterfaceIndexerNode, _Node19);

  function InterfaceIndexerNode(name, keyType, returnType) {
    _classCallCheck(this, InterfaceIndexerNode);

    var _this23 = _possibleConstructorReturn(this, (InterfaceIndexerNode.__proto__ || Object.getPrototypeOf(InterfaceIndexerNode)).call(this));

    _this23._name = name;
    _this23._keyType = keyType;
    _this23._returnType = returnType;
    return _this23;
  }

  _createClass(InterfaceIndexerNode, [{
    key: '_toCode',
    value: function _toCode() {
      return '[' + this._name + ': ' + this._keyType + ']: ' + this._returnType + ';';
    }
  }]);

  return InterfaceIndexerNode;
}(Node)) || _class22;

var ClassNode = (0, _utils.factory)(_class23 = function (_DecorableNode2) {
  _inherits(ClassNode, _DecorableNode2);

  function ClassNode(name, superName, members, typeParameters, superTypeParameters, impls) {
    _classCallCheck(this, ClassNode);

    var _this24 = _possibleConstructorReturn(this, (ClassNode.__proto__ || Object.getPrototypeOf(ClassNode)).call(this));

    _this24._name = name;
    _this24._super = superName;
    _this24._members = members;
    _this24._typeParameters = typeParameters;
    _this24._superTypeParameters = superTypeParameters;
    _this24._impls = impls;
    return _this24;
  }

  _createClass(ClassNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var members = this._members.map(toCode(_extends({}, ctx, { level: 1 }))).join('\n');
      var superTypeParameters = this._superTypeParameters !== null ? '<' + this._superTypeParameters.join(', ') + '>' : '';
      var superStr = this._super ? ' extends ' + this._super + superTypeParameters : '';
      var typeParameters = this._typeParameters !== null ? '<' + this._typeParameters.join(', ') + '>' : '';
      var impls = this._impls !== null ? ' implements ' + this._impls.map(toCode(_extends({}, ctx, { level: 0 }))).join(', ') : '';

      return 'class ' + this._name + typeParameters + superStr + impls + ' {\n' + members + '\n}';
    }
  }, {
    key: 'preventSemi',
    get: function get() {
      return true;
    }
  }]);

  return ClassNode;
}(DecorableNode)) || _class23;

var ImplementsNode = (0, _utils.factory)(_class24 = function (_Node20) {
  _inherits(ImplementsNode, _Node20);

  function ImplementsNode(name, typeParameters) {
    _classCallCheck(this, ImplementsNode);

    var _this25 = _possibleConstructorReturn(this, (ImplementsNode.__proto__ || Object.getPrototypeOf(ImplementsNode)).call(this));

    _this25._name = name;
    _this25._typeParameters = typeParameters;
    return _this25;
  }

  _createClass(ImplementsNode, [{
    key: '_toCode',
    value: function _toCode(_ctx) {
      var name = this._name;
      var typeParameters = this._typeParameters !== null ? '<' + this._typeParameters.join(', ') + '>' : '';

      return '' + name + typeParameters;
    }
  }]);

  return ImplementsNode;
}(Node)) || _class24;

var ClassMethodNode = (0, _utils.factory)(_class25 = function (_MethodNode4) {
  _inherits(ClassMethodNode, _MethodNode4);

  function ClassMethodNode(name, params, type, typeParameters, isStatic) {
    _classCallCheck(this, ClassMethodNode);

    var _this26 = _possibleConstructorReturn(this, (ClassMethodNode.__proto__ || Object.getPrototypeOf(ClassMethodNode)).call(this, name, params, type, typeParameters));

    _this26._static = isStatic;
    return _this26;
  }

  _createClass(ClassMethodNode, [{
    key: '_toCode',
    value: function _toCode(ctx) {
      var prefix = this._static ? 'static ' : '';

      return '' + prefix + _get(ClassMethodNode.prototype.__proto__ || Object.getPrototypeOf(ClassMethodNode.prototype), '_toCode', this).call(this, ctx) + ';';
    }
  }]);

  return ClassMethodNode;
}(MethodNode)) || _class25;

var ClassConstructorNode = (0, _utils.factory)(_class26 = function (_ClassMethodNode) {
  _inherits(ClassConstructorNode, _ClassMethodNode);

  function ClassConstructorNode(params) {
    _classCallCheck(this, ClassConstructorNode);

    return _possibleConstructorReturn(this, (ClassConstructorNode.__proto__ || Object.getPrototypeOf(ClassConstructorNode)).call(this, 'constructor', params, null, null));
  }

  _createClass(ClassConstructorNode, [{
    key: 'isConstructor',
    get: function get() {
      return true;
    }
  }]);

  return ClassConstructorNode;
}(ClassMethodNode)) || _class26;

var ClassPropertyNode = (0, _utils.factory)(_class27 = function (_Node21) {
  _inherits(ClassPropertyNode, _Node21);

  function ClassPropertyNode(name, type, isStatic) {
    _classCallCheck(this, ClassPropertyNode);

    var _this28 = _possibleConstructorReturn(this, (ClassPropertyNode.__proto__ || Object.getPrototypeOf(ClassPropertyNode)).call(this));

    _this28._name = name;
    _this28._type = type;
    _this28._static = isStatic;
    return _this28;
  }

  _createClass(ClassPropertyNode, [{
    key: '_toCode',
    value: function _toCode() {
      var prefix = this._static ? 'static ' : '';

      return '' + prefix + this._name + ': ' + this.type + ';';
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type || 'any';
    }
  }]);

  return ClassPropertyNode;
}(Node)) || _class27;

function indent(_ref4) {
  var level = _ref4.level,
      step = _ref4.step;

  if (level === 0) {
    return _utils.id;
  }

  var result = step;
  for (var i = 1; i < indent; i++) {
    result += step;
  }

  return function (source) {
    return result + source;
  };
}

function emptyCtx() {
  return Object.freeze({
    level: 0,
    step: '  ',
    multiVarStep: '  ',
    indent: function indent() {
      return Object.freeze(_extends({}, this, { level: this.level + 1 }));
    }
  });
}

function toCode(ctx) {
  return function (node) {
    return node.toCode(ctx);
  };
}

function createModuleDeclaration(name, nodes) {
  return ModuleDeclarationNode(name, nodes);
}

function createExportAllFrom(source) {
  return ExportAllFromNode(source);
}

function createExportDeclaration(decl) {
  return ExportNamedDeclarationNode(decl);
}

function createImportDeclaration(decl) {
  return ImportDeclarationNode(decl);
}

function createVariableDeclaration(kind, decs) {
  return VariableDeclarationNode(kind, decs);
}

function createVariableDeclarator(name, type) {
  return VariableDeclaratorNode(name, type);
}

function createExportSpecifier(exported, local) {
  return ExportSpecifierNode(exported, local);
}

function createExport(specifiers, source) {
  return ExportNode(specifiers, source);
}

function createImportSpecifier(imported, local) {
  return ImportSpecifierNode(imported, local);
}

function createImportDefaultSpecifier(imported, local) {
  return ImportDefaultSpecifierNode(imported, local);
}

function createImportNamespaceSpecifier(local) {
  return ImportNamespaceSpecifierNode(local);
}

function createImport(encloseSpecifiers, specifiers, source) {
  return ImportNode(encloseSpecifiers, specifiers, source);
}

function createParam(name, type) {
  var _ref5 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref5$isRest = _ref5.isRest,
      isRest = _ref5$isRest === undefined ? false : _ref5$isRest,
      _ref5$isOptional = _ref5.isOptional,
      isOptional = _ref5$isOptional === undefined ? false : _ref5$isOptional;

  return ParameterNode(name, type, isRest, isOptional);
}

function createObjectParam(properties, type, isOptional) {
  return ObjectParameterNode(properties, type, isOptional);
}

function createObjectParamProp(key, value, isOptional) {
  return ObjectParameterPropertyNode(key, value, isOptional);
}

function createFunction(name, params, type, typeParameters) {
  return FunctionNode(name, params, type, typeParameters);
}

function createInterface(name, members, baseInterfaces, typeParameters) {
  return InterfaceNode(name, members, baseInterfaces, typeParameters);
}

function createInterfaceMethod(name, params, type, typeParameters, isStatic, isOptional) {
  return InterfaceMethodNode(name, params, type, typeParameters, isStatic, isOptional);
}

function createInterfaceProperty(name, type, isStatic, isOptional) {
  return InterfacePropertyNode(name, type, isStatic, isOptional);
}

function createInterfaceIndexer(name, keyType, returnType) {
  return InterfaceIndexerNode(name, keyType, returnType);
}

function createInterfaceCall(params, type) {
  return InterfaceCallNode(params, type);
}

function createClass(name, superName, members, typeParameters, superTypeParameters, impls) {
  return ClassNode(name, superName, members, typeParameters, superTypeParameters, impls);
}

function createImplements(name, typeParameters) {
  return ImplementsNode(name, typeParameters);
}

function createClassConstructor(params) {
  return ClassConstructorNode(params);
}

function createClassMethod(name, params, type, typeParameters, isStatic) {
  return ClassMethodNode(name, params, type, typeParameters, isStatic);
}

function createClassProperty(name, type, isStatic) {
  return ClassPropertyNode(name, type, isStatic);
}